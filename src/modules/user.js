import { string } from 'pg-format'
import {pool} from '../config/db.js'
import { getDay } from './scheduleLogic.js'



export const saveUser = async (msg) => {
    let id = msg.chat.id
    let first_name = msg.chat.first_name
    let last_name = msg.chat.last_name
    let username = msg.chat.username
    
    let ids = await pool.query(`SELECT id FROM users WHERE id = ${id}`);

    if (!ids.rowCount) {
        await pool.query(`INSERT INTO users (id, first_name, last_name, username) VALUES (${id}, '${String(first_name)}', '${String(last_name)}', '${String(username)}')`);
    }

}

export const setGroup = async (id, group) => {
    let tName = await pool.query(`SELECT * FROM groups WHERE name LIKE '%${group}%'`);
    tName = tName.rows[0]
    await pool.query(`UPDATE users SET "group" = '${tName.name}', "profile" = 'student', id_tnorgroup = ${tName.id}  WHERE id = ${id}`);
}

export const setFullName = async (id, name) => {
    let tName = await pool.query(`SELECT * FROM teacher_names WHERE name LIKE '%${name}%'`);
    tName = tName.rows[0]
    await pool.query(`UPDATE users SET "full_teacher_name" = '${tName.name}', "profile" = 'teacher', id_tnorgroup = ${tName.id} WHERE id = ${id}`);
}

export const setData = async (id, column, data, type) => {
    if (type === 'string') {
        await pool.query(`UPDATE users SET "${column}" = '${data}' WHERE id = ${id}`);
    } else if (type === 'boolean') {
        await pool.query(`UPDATE users SET "${column}" = ${data} WHERE id = ${id}`);
    }
}
export const getData = async (id, column) => {
    let res = await pool.query(`SELECT ${column} FROM users WHERE id = ${id}`);
    return res.rows[0][column]
}

export const setProfile = async (id, profile) => {
    await pool.query(`UPDATE users SET "profile" = '${profile}' WHERE id = ${id}`);
}



export const setMSGidForDel = async (id, msgID) => {
    await pool.query(`UPDATE users SET "delmsg" = ${msgID} WHERE id = ${id}`);
}

export const showProfile = async (id, action) => {
    let user = await pool.query(`SELECT * FROM users WHERE id = ${id}`);
    user = user.rows[0]

    let txt = ''
    let keyB = {"inline_keyboard": []};

    if (action === 'toChange') {
        txt += `*`
        txt += `–í—ã–±–∏—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:`
        txt += `*`

        keyB.inline_keyboard.push([])
        keyB.inline_keyboard[0].push({ "text": "–°–¢–£–î–ï–ù–¢", 'callback_data': 'setRole-' + user.delmsg + '-student'})
        keyB.inline_keyboard.push([])
        keyB.inline_keyboard[1].push({ "text": "–£–ß–ò–¢–ï–õ–¨", 'callback_data': 'setRole-' + user.delmsg + '-teacher'})
    } else if (action === 'toConfigure'){
        txt += `*`
        txt += `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`
        txt += `*`

        keyB.inline_keyboard.push([])
        keyB.inline_keyboard[0].push({ "text": "–í–ö–õ/–í–´–ö–õ —É–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏", 'callback_data': 'setTime_Notification_Flag-' + user.delmsg + `-${!user.time_notification_flag}`})
        keyB.inline_keyboard.push([])
        keyB.inline_keyboard[1].push({ "text": "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏", 'callback_data': 'setTime_Notification-' + user.delmsg + `-none` + `-${user.time_notification}`})
        // keyB.inline_keyboard.push([])
        // keyB.inline_keyboard[2].push({ "text": "–í–ö–õ/–í–´–ö–õ —É–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –ø–∞—Ä–µ", 'callback_data': 'setRole-' + user.delmsg + '-teacher'})

    } else {
        if (user.profile === "student") {
            txt += `*‚ñÑ\n`
            txt += `‚ñ∏ üë§ –í—ã: —Å—Ç—É–¥–µ–Ω—Ç\n`
            txt += `‚ñ∏ üë• –ì—Ä—É–ø–ø–∞: ${user.group}\n`
            txt += `‚ñ∏ üìÜ –†–∞—Å—Å—ã–ª–∫–∞: ${user.time_notification_flag ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}\n`
            txt += `‚ñ∏ ‚åöÔ∏è –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ${user.time_notification}\n`
            txt += `‚ñÄ*\n`
            txt += `_–ï—Å–ª–∏ –Ω–µ—Ç —É–¥–æ–±–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞" ‚Æï /keyt_`
            keyB.inline_keyboard.push([])
            keyB.inline_keyboard[0].push({ "text": "–°–ú–ï–ù–ò–¢–¨ –ì–†–£–ü–ü–£", 'callback_data': 'changeFNorGroup-' + user.delmsg + '-group'})    
        } else if (user.profile === "teacher") {
            txt += `*‚ñÑ\n`
            txt += `‚ñ∏ üë§ –í—ã: —É—á–∏—Ç–µ–ª—å\n`
            txt += `‚ñ∏ üë• –§–ò–û: ${user.full_teacher_name}\n`
            txt += `‚ñ∏ üìÜ –†–∞—Å—Å—ã–ª–∫–∞: ${user.time_notification_flag ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}\n`
            txt += `‚ñ∏ ‚åöÔ∏è –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ${user.time_notification}\n`
            txt += `‚ñÄ*\n`
            txt += `_–ï—Å–ª–∏ –Ω–µ—Ç —É–¥–æ–±–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞" ‚Æï /keyt_`
            keyB.inline_keyboard.push([])
            keyB.inline_keyboard[0].push({ "text": "–°–ú–ï–ù–ò–¢–¨ –§–ò–û", 'callback_data': 'changeFNorGroup-' + user.delmsg + '-fullName'})    
        }
        
        keyB.inline_keyboard.push([])
        keyB.inline_keyboard[0].push({ "text": "–°–ú–ï–ù–ò–¢–¨ –ü–†–û–§–ò–õ–¨", 'callback_data': 'showProfile-' + user.delmsg + '-toChange'})
        keyB.inline_keyboard.push([])
        keyB.inline_keyboard[1].push({ "text": "–ù–ê–°–¢–†–û–ò–¢–¨", 'callback_data': 'showProfile-' + user.delmsg + '-toConfigure'})

    }

    keyB = {
        reply_markup: `{"inline_keyboard":${JSON.stringify(keyB.inline_keyboard)}}`
    }


    
    return [txt, user.delmsg, keyB]
}


export const reportFunction = async (id, text, msgID) => {
    await pool.query(`UPDATE users SET "report_text" = '${text}', report_flag = false WHERE id = ${id}`);

    let txt = '–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?\n–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç:\n\n' + text
    let keyB = {"inline_keyboard": []};


    keyB.inline_keyboard.push([])
    keyB.inline_keyboard[0].push({ "text": "–î–ê(–æ—Ç–ø—Ä–∞–≤–∏—Ç—å)", 'callback_data': 'report' + '-toPost' + `-${msgID}`})
    keyB.inline_keyboard.push([])
    keyB.inline_keyboard[1].push({ "text": "–ù–ï–¢(–Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–π)", 'callback_data': 'report' + '-to–°ancel' + `-${msgID}`})

    keyB = {
        reply_markup: `{"inline_keyboard":${JSON.stringify(keyB.inline_keyboard)}}`
    }

    return [txt, keyB]
}

export const reportPost = async (id) => {
    let user = await pool.query(`SELECT report_text, id, report_data FROM users WHERE id = ${id}`);

    user = user.rows[0]

    let report_data = user.report_data.split('-')

    let gORfn  

    if (report_data[0] === 'student') {
        gORfn = await pool.query(`SELECT name FROM public.groups WHERE id = ${report_data[1]}`);
    } else {
        gORfn = await pool.query(`SELECT name FROM teacher_names WHERE id = ${report_data[1]}`);
    }
    gORfn = gORfn.rows[0].name

    let dayText = await getDay('00', report_data[2], {'profile': report_data[0], 'group': gORfn, 'full_teacher_name': gORfn})

    let textFIN = `ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${id}\n`
    + `–ñ–∞–ª–æ–±–∞ –Ω–∞:\n${dayText}\n\n`
    + `–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n${user.report_text}`

    await pool.query(`INSERT INTO tickets(user_id,type) VALUES(${user.id}, 'MIP')`);

    let idT = await pool.query(`'SELECT id FROM tickets ORDER BY id DESC LIMIT 1'`);

    idT = idT.rows[0].ticket_id

    await pool.query(`INSERT INTO messages(ticket_id, sender_id, message) VALUES (${idT}, ${user.id}, ${textFIN})`);
    
}





// report_text
// ‚ñÑ
// ‚ñ∏ üë§ –í—ã: —Å—Ç—É–¥–µ–Ω—Ç
// ‚ñ∏ üë• –ì—Ä—É–ø–ø–∞: –ö–ü1–ê21 –ö–î–í
// ‚ñ∏ üìÜ –†–∞—Å—Å—ã–ª–∫–∞: –≤—ã–∫–ª—é—á–µ–Ω–∞
// ‚ñ∏ ‚åöÔ∏è –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: 9:00
// ‚ñÄ

// {
//     id: 884131132,
//     group: '–ö–ü1–ê21 –ö–î–í',
//     usageCounter: 0,
//     lastUse: null,
//     first_name: '–ò–≤–∞–Ω',
//     last_name: 'KaToni',
//     username: 'I_KaToni_I',
//     profile: 'student'
// }



